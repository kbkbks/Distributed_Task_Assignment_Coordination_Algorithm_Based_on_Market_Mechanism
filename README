/*
 * Copyright (c) 2019-2020 Xinyan Han. All rights reserved.
 * metatron96@126.com
 * info:
 * 2019-10-29
 * 分布式任务处理与竞拍机制（version 3.1）,linux版
 * 该程序测试在多个任务点同时发布一些任务后，机器人按照竞拍算法分配任务（机器人为分布式，任务发布点为集中式）。
 * 目前程序包含任务之间的协调作用，可一定程度上提高程序的分配质量。
 * 修改通信部分，两个机器人之间使用两个全局互斥量传递价格，采用双向通信。
 * 加入Bidder一致性原则，用以保证分配的一致性。
 * 针对eps加入随机量，使竞拍机器人之间不太会出现等价情形。
 * 修改之前存在的竞拍算法收敛异常问题。
 * 将原先Windows系统上的本程序，重写至linux系统。
 * -------------------------------------------------------------------------------------------------------------------------
 * 目前的程序在一个进程中执行，利用多线程技术模拟多机器人，多机器人之间通信采用线程通信（全局变量），线程并发异步IO。
 * 程序当中设计的任务发布点和任务列表为集中式，机器人为分布式。
 * 当前版本程序采用D.P.Bertskas的竞拍算法，可以实现单局竞拍最优。
 * -------------------------------------------------------------------------------------------------------------------------
 * 2020-04-10 加入多机器人协调策略，写入单机器人线程当中
 * 通信协调范围：邻接机器人
 * 通信协调次数：1次
 * 通信协调长度：TaskExecutionQueue 3个任务长度
 * -------------------------------------------------------------------------------------------------------------------------
 * 2020-06-04 创建新分支TaskExecution，分离出多机器人任务执行概念。
 * 2020-06-04 增加多机器人任务执行概念模型，内容见resource/多机器人任务执行.pdf
 * 2020-06-09 新总体目标：最小化最大机器人任务执行路程
 *            新效用：U_ij = 1 (d_ij + d_unexecuted)
 *            任务执行表达：任务结构体TaskTemplate，增加任务负载，用以表达任务执行花费的强度。
 *            竞拍完成后，每个机器人执行一定任务负载。
 *            typedef struct TaskTemplate {
 *                int TaskNo;    // 任务编号(任务点中的任务编号)
 *                int PointNo;   // 任务点编号
 *                float BeginPoint[2];   // 任务起点
 *                float EndPoint[2];  // 任务终点
 *                int TaskLoad;     // 任务负载
 *                int TaskExeProgress;     // 任务执行进度, 初始为0，完毕为TaskLoad
 *                int TaskExecutedFlag;   // 任务完成标志位，0标志未执行，1标志执行中，2标志已完成
 *            }TaskTemplate;
 * 2020-06-10 封装全局目标
 * -------------------------------------------------------------------------------------------------------------------------
 * 2020-06-22 创建新分支auctionAlgorithm_bug_fixed，用于修复基于市场机制的竞拍算法bug，
 * 当机器人数大于任务数，算法执行出现异常，进入死循环。
 * 2020-07-02 修复机器人数大于任务数bug，并且修复目标函数计算bug，后续代码不再使用updateRobotLocation方法
 * -------------------------------------------------------------------------------------------------------------------------
 * 2020-09-15 删除GlobalObjective分支
 * -------------------------------------------------------------------------------------------------------------------------
 * 2020-09-15 创建HeterogeneousRobot分支，用于设计并实现异构机器人集群任务分配。
 *      修改ctaskpoint.h，补充析构函数。需合并至master分支。
 *      修改ctasklist.h和ctasklist.cpp中getTask函数，参数改为引用传递，防止临时变量销毁导致的TaskPoint对象中new出来的
 * TaskRepositor销毁。后续可以增加TaskPoint类的拷贝构造函数，用于深拷贝。需合并至master分支。
 *      修改TaskTemplate，该结构体也发生多次拷贝和析构，导致结构体内不能放容器（会有运行时内存分配错误），后续需要修改类中
 * 拷贝构造或者修改调用时参数传递方式。需合并至master分支。
 *      针对每个机器人和任务都只对应一种原子能力的情况，当前可基本实现异构机器人分配。
 * -------------------------------------------------------------------------------------------------------------------------
 * 2020-09-22 封装异构机器人任务匹配函数，将crobot::calculateValue中原先异构机器人任务匹配函数部分代码封装入matchRobot。
 */